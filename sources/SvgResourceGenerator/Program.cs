using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;
using YiSA.Foundation.CommandLine;

namespace SvgResourceGenerator
{
    public class Args
    {
        [CmdArgOption(ShortcutName = "d", CommandName = "svg-dir", IsRequired = true, Description = "font directory")]
        public string SvgPath { get; set; } = string.Empty;

        [CmdArgOption(ShortcutName = "o", CommandName = "output", IsRequired = true,
            Description = "xaml output directory")]
        public string OutputPath { get; set; } = string.Empty;

        [CmdArgOption(ShortcutName = "i", CommandName = "ignore-list", Description = "List of icons you want to don't use")]
        public string WhiteListPath { get; set; } = string.Empty;

        [CmdArgOption(ShortcutName = "n", CommandName = "namespace",
            Description = "namespace by auto generate c# file")]
        public string NameSpace { get; set; } = "SvgResourceGenerator";
    }

    public class GeometryInfo
    {
        public string Label { get; set; }
        public string[] Geometry { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var perser = new Parser();
            var parseResult = perser.TryParse<Args>(args, out var commandLineArgs);

            if (parseResult == CommandLineParseResult.Version)
            {
                Console.WriteLine(perser.GetVersionText());
                return;
            }

            if (parseResult == CommandLineParseResult.Failed ||
                parseResult == CommandLineParseResult.Help)
            {
                Console.WriteLine(perser.GetHelpText(typeof(Args)));
                return;
            }

            var ignoreList = Array.Empty<Regex>();
            if (string.IsNullOrEmpty(commandLineArgs.WhiteListPath) is false)
            {
                ignoreList = File.ReadAllText(commandLineArgs.WhiteListPath)
                    .Replace("\\","/")
                    .Replace("*",".*")
                    .Replace("\r\n", ",")
                    .Replace('\n', ',')
                    .Split(',')
                    .Where( x => string.IsNullOrWhiteSpace(x) is false)
                    .Select(x=>new Regex(x,RegexOptions.IgnoreCase))
                    .ToArray();
            }

            var ignoredFiles = new List<string>();

            bool ignore_check(string absolutePath)
            {
                if (ignoreList.Any() is false)
                    return true;

                var path = absolutePath.Replace("\\", "/");
                var isIgnore = ignoreList.Any(r => r.IsMatch(path));
                if(isIgnore)
                    ignoredFiles.Add(absolutePath);
                return !isIgnore;
            }
            
            var icons = Directory.EnumerateFiles(Path.Combine(commandLineArgs.SvgPath), "*.svg",SearchOption.AllDirectories)
                .Where(ignore_check)
                .Select(x => LoadGeometry(x, Directory.GetParent(x).Name))
                .ToArray();

            // ! write to autogen.cs
            var enumFileBuilder = new StringBuilder();

            enumFileBuilder.AppendLine(
                "//------------------------------------------------------------------------------");
            enumFileBuilder.AppendLine("// <auto-generated>");
            enumFileBuilder.AppendLine("//     This code was generated SvgResourceGeneratorrator(c)yuki.tsuneyama");
            enumFileBuilder.AppendLine("//");
            enumFileBuilder.AppendLine("//     Changes to this file may cause incorrect behavior and will be lost if");
            enumFileBuilder.AppendLine("//     the code is regenerated.");
            enumFileBuilder.AppendLine("// </auto-generated>");
            enumFileBuilder.AppendLine(
                "//------------------------------------------------------------------------------");
            enumFileBuilder.AppendLine("using System;");
            enumFileBuilder.AppendLine("using System.Collections.Generic;");
            enumFileBuilder.AppendLine("using System.Windows.Media;");
            enumFileBuilder.AppendLine($"namespace {commandLineArgs.NameSpace}");
            enumFileBuilder.AppendLine("{");
            enumFileBuilder.AppendLine("    public enum IconType");
            enumFileBuilder.AppendLine("    {");
            foreach (var icon in icons)
                enumFileBuilder.AppendLine($"        {icon.Label},");
            enumFileBuilder.AppendLine("    }");

            enumFileBuilder.AppendLine("    internal class _IconFactory");
            enumFileBuilder.AppendLine("    {");
            enumFileBuilder.AppendLine(
                "        public static IReadOnlyDictionary<IconType, Lazy<PathGeometry>> Icons { get; } ");
            enumFileBuilder.AppendLine("            = new Dictionary<IconType, Lazy<PathGeometry>>()");
            enumFileBuilder.AppendLine("        {");
            foreach (var icon in icons)
            {
                enumFileBuilder.AppendLine("            {");
                enumFileBuilder.AppendLine($"                IconType.{icon.Label} , new Lazy<PathGeometry>(() =>");
                enumFileBuilder.AppendLine("                {");
                enumFileBuilder.AppendLine(
                    "                    var geometry = new PathGeometry() { FillRule = FillRule.Nonzero,};");
                foreach (var geometry in icon.Geometry)
                    enumFileBuilder.AppendLine(
                        $"                    geometry.AddGeometry(Geometry.Parse(\"{geometry}\"));");
                enumFileBuilder.AppendLine("                    geometry.Freeze();");
                enumFileBuilder.AppendLine("                    return geometry;");
                enumFileBuilder.AppendLine("                })");
                enumFileBuilder.AppendLine("            },");
            }

            enumFileBuilder.AppendLine("        };");
            enumFileBuilder.AppendLine("    }");

            enumFileBuilder.AppendLine("}");
            File.WriteAllText(Path.Combine(commandLineArgs.OutputPath, "icons.autogen.cs"), enumFileBuilder.ToString());

            var logBuilder = new StringBuilder();
            if (ignoredFiles.Any())
            {
                // output ignored icon log
                logBuilder.AppendLine("Ignored Files");
                foreach (var file in ignoredFiles)
                {
                    logBuilder.AppendLine($" - {file}");
                }
            }
            if(logBuilder.Length > 0)
                File.WriteAllText(Path.Combine(commandLineArgs.OutputPath, "icons_conv.log"), logBuilder.ToString());
        }

        internal static IEnumerable<string> ReadSvgFromFile(string filePath)
        {
            var result = new List<string>();

            var file = new XmlDocument();
            using (var reader = new StreamReader(filePath, new UTF8Encoding(false)))
            {
                file.Load(reader);

                foreach (var path in file.GetElementsByTagName("path"))
                {
                    if (path is XmlNode node && node.Attributes != null)
                    {
                        foreach (var attribute in node.Attributes)
                        {
                            if (attribute is XmlAttribute xmlAttribute && xmlAttribute.Name == "d")
                            {
                                result.Add(xmlAttribute.Value);
                                break;
                            }
                        }
                    }
                }
            }

            return result.ToArray();
        }

        internal static GeometryInfo LoadGeometry(string filepath, string type)
        {
            var svgData = ReadSvgFromFile(filepath);
            Console.WriteLine($"convert {filepath}");

            //! convert string array to Geometry
            var list = new List<string>();
            foreach (var svgPath in svgData)
            {
                list.Add(Regex.Replace(svgPath, @"\n+", ""));
            }

            var name = Path.GetFileNameWithoutExtension(filepath)
                .Replace('-', '_');
            name = CultureInfo.CurrentCulture.TextInfo.ToTitleCase(name);

            return new GeometryInfo()
            {
                Label = $"Icon_{name}_{type}",
                Geometry = list.ToArray(),
            };
        }
    }
}